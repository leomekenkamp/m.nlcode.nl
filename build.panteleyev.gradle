plugins {
    id 'application'
    //id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.openjfx.javafxplugin' version '0.0.14'
    id "org.panteleyev.jpackageplugin" version "1.5.2"
}

defaultTasks 'build'

repositories {
    mavenCentral()
}

javafx {
    version = '17'
    modules = [ \
        'javafx.controls',
        'javafx.fxml',
    ]
}

application {
    mainClass = 'nl.nlcode.m.JfxLauncher'
    mainModule = 'nl.nlcode.m'
    applicationName = 'm_nlcode_nl'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

group = 'nl.nlcode'
version = '1.0.0'
sourceCompatibility = '1.16'

ext {
    jacksonVersion = '2.14.2'
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30';
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.0.1'
    implementation 'uk.co.xfactory-librarians:coremidi4j:1.6'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "$jacksonVersion"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "$jacksonVersion"
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "$jacksonVersion"

    testImplementation "org.testfx:testfx-core:4.0.16-alpha"
    //testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation "org.testfx:testfx-core:4.0.16-alpha"
    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.register("copyDependencies", Copy) {
    from configurations.runtimeClasspath
    into "$buildDir/jars"
}

tasks.register("copyJar", Copy) {
    from tasks.jar
    into "$buildDir/jars"
}

// modular
tasks.jpackage {
    dependsOn("build", "copyDependencies", "copyJar")
    input  = "$buildDir/jars"
    destination = "$buildDir/distributions"
    vendor = "nlcode.nl"
    appVersion = "1.0.0"
    arguments = Arrays.asList("-Xmx2048m")
    type = "dmg"
    appName = "m_nlcode_nl"
    runtimeImage = System.getProperty("java.home")
    module = "org.app.module/org.app.MainClass"
    modulePaths = Arrays.asList(file("$buildDir/jars"))
    destination = "$buildDir/dist"
    copyright = "Copyright © 2023 Leo Mekenkamp"
    javaOptions = Arrays.asList("-Dfile.encoding=UTF-8")
    macPackageIdentifier = "m_nlcode_nl"
    macPackageName = "m.nlcode.nl"
    icon = "src/main/resources/m.nlcode.nl.icns"
    windows {
        winConsole = true
    }
}
/* 
// non modular
tasks.jpackage {
    dependsOn("build", "copyDependencies", "copyJar")
    input  = "$buildDir/jars"
    destination = "$buildDir/distributions"
    vendor = "nlcode.nl"
    appVersion = "1.0.0"
    arguments = Arrays.asList("-Xmx2048m")
    type = "dmg"
    appName = "m_nlcode_nl"
   // mainJar = tasks.jar.get().archiveFile
    mainJar = "m_nlcode_nl-1.0.0.jar"
    mainClass = "nl/nlcode/m/JfxLauncher"
    copyright = "Copyright © 2023 Leo Mekenkamp"
    javaOptions = Arrays.asList("-Dfile.encoding=UTF-8")
    macPackageIdentifier = "m_nlcode_nl"
    macPackageName = "m.nlcode.nl"
    runtimeImage = "$buildDir/java-runtime"
    icon = "src/main/resources/m.nlcode.nl.icns"
    windows {
        winConsole = true
    }
}
end non modular */

//shadowJar {
   //archiveBaseName.set("$archiveBaseName-fatjar")
   //archiveClassifier.set('')
   //archiveVersion.set('')
//}
//mac {
//    icon = "m.nlcode.m.icns"
//}

/*
detected_modules=`jdeps \
  -q \
  --multi-release 16 \
  --ignore-missing-deps \
  --print-module-deps \
  --class-path "build/install/m_nlcode_nl/jars/*" \
    build/classes/java/main/nl/nlcode/m/JfxLauncher.class`
echo "detected modules: ${detected_modules}"

// OR SIMPLY:
jdeps \
  -q \
  --multi-release 17 \
  --ignore-missing-deps \
  --print-module-deps \
  --class-path "build/install/m_nlcode_nl/jars/*" \
    build/classes/java/main/nl/nlcode/m/JfxLauncher.class


// OUTPUT: java.base,java.desktop,java.management,java.naming,java.prefs,java.scripting,java.sql,jdk.jfr,jdk.jsobject,jdk.unsupported,jdk.xml.dom
// manually added: jdk.localedata

// build/install/m_nlcode_nl/lib

jlink \
  --strip-native-commands \
  --no-header-files \
  --no-man-pages  \
  --compress=2  \
  --strip-debug \
  --add-modules "jdk.localedata,java.base,java.desktop,java.management,java.naming,java.prefs,java.scripting,java.sql,jdk.jfr,jdk.jsobject,jdk.unsupported,jdk.xml.dom" \
  --include-locales=en,nl \
  --output build/java-runtime

//jpackage --name m.nlcode.nl --input . --main-jar m_nlcode_nl-1.0.0.jar --jlink-options --bind-services --main-class nl.nlcode.m.ui.App

// --name name under the installer and app icon on a mac
// --mac-package-name filename of the dmg (or pgk)
jpackage \
--type dmg \
--dest build/distributions \
--input build/libs \
--name m_nlcode_nl \
--main-class nl/nlcode/m/JfxLauncher \
--main-jar m_nlcode_nl-1.0.0.jar \
--java-options -Xmx2048m \
--runtime-image build/java-runtime \
--icon src/main/resources/m.nlcode.nl.icns \
--app-version 1.0.0 \
--vendor "nlcode.nl" \
--copyright "Copyright © 2023 Leo Mekenkamp" \
--mac-package-identifier m_nlcode_nl \
--mac-package-name m.nlcode.nl
*/